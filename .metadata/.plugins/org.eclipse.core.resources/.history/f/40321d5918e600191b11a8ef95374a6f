package br.edu.ifpb.gugawag.so.sockets;

import java.io*;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Map;

public class ServerThread extends Thread {

	private Socket clientSocket;
	private Map<String, ArrayList<Subscritor>> topics;
	private Map<String, String> news;
	private String newTopic = null;
	
	public ServerThread(Socket clientSocket, Map<String, ArrayList<Subscritor>> topics, Map<String, String> news) {
		this.clientSocket = clientSocket;
		this.topics = topics;
		this.news = news;
	}
	
	public void run () {
		DataOutputStream dos = null;
		DataInputStream dis = null;
		String topic = "";
		String ip = "";
		int port = 0;
		Subscritor subscritor;
		ArrayList<Subscritor> subscritors;
		Socket socket = null;
		DataOutputStream dosMsg = null;
		DataInputStream disMsg = null;
		boolean notSend = true;
		
		try {
			dos = new DataOutputStream(clientSocket.getOutputStream());
			dis = new DataInputStream(clientSocket.getInputStream());
			ip = clientSocket.getInetAddress().getHostAddress();
			port = clientSocket.getPort();
		} catch (IOException e) {
            e.printStackTrace();
        }
		
		while (true) {
			try {
				topic = dis.readUTF();
				
			} catch (IOException e) {
                e.printStackTrace();
            }
			
			if(topic.equals("newSend")) {
				try {
					dos.writeUTF(Integer.toString(7100));
					if(socket == null) {
						socket = new Socket(ip, 7100);
					}
					if(dosMsg == null) {
						dosMsg = new DataOutputStream(socket.getOutputStream());
					}
					if(disMsg == null) {
						disMsg = new DataInputStream(socket.getInputStream());
					}
				} catch (ParseException e) {
                    e.printStackTrace();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } catch (UnknownHostException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
			}

		}
	}
}
